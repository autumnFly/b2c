超级pom所在的位置: $M2_HOME/lib/maven-model-builder-3.0.jar
路径org/apache/maven/model/pom-4.0.0.xml

mvn help:system 打印出所有的Java系统属性和环境变量

help:describe -Dplugin=compiler -Ddetail 取得帮助
help:describe -Dplugin=org.apache.maven.plugins:maven-compiler-plugin:3.6.1 -Ddetail

clean compile 编译

clean:clean clean插件的clean目标

compiler:compile compiler插件的compile目标

package -DskipTests 打包时跳过运行测试代码

package -Dmaven.test.skip=true 打包时跳过编译和运行测试代码,同时控制了两个插件的行为

clean test 主资源处理 主代码编译 测试资源处理 测试代码编译

test -Dtest=BootTest 只执行特定的测试类,当然也可以在surefire插件中配置执行或者不执行某些测试类

clean package 打包

clean install 安装到本地仓库

clean deploy 部署到远程仓库

clean package deploy 打包发布到仓库

使用meavn-shade-plugin生成可执行的jar文件

依赖范围:控制依赖与这三种classpath(编译classpath 测试classpath 运行classpath)的关系
compile 三种classpath都有效 如spring-core
test 测试classpath有效 如junit 只在编译和运行测试代码有效
provided 编译和测试classpath有效 如servlet-api 在运行项目时容器已经提供,不需要maven重复引入
runtime 测试和运行classpath有效 如jdbc驱动 编译时只需要jdbc提供的接口 只有在测试和运行需要jdbc的具体实现
system 同provided 但是必须指定systemPath 会造成不可移植的风险
import 不会产生实际影响,通常指向packaging类型为pom的模块

dependency:list 列出项目已解析依赖

dependency:tree 列出项目的依赖树

dependency:analyze 分析项目的依赖情况

三个生命周期:clean清理项目 default构建项目 site建立项目站点
clean:pre-clean clean(maven-clean-plugin:clean) post-clean
default:validate initialize process-resources(maven-resources-plugin:resources) compiler(maven-compiler-plugin:compile)
process-test-resources(maven-resources-plugin:testResources) test-compiler(maven-compiler-plugin:testCompile)
test(maven-surefile-plugin:test) prepare-package package(maven-jar-plugin:jar) integration-test verify
install(maven-install-plugin:install) deploy(maven-deploy-plugin:deploy)
site:pre-site site(maven-site-plugin:site) post-site site-deploy(maven-site-plugin:deploy)

jetty:run -Djetty.port=9080 启动内置的jetty web容器

help:active-profiles 查看当前激活的profile

help:all-profiles 查看所有的profile